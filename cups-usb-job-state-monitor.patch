diff --git a/backend/usb.c b/backend/usb.c
index a4dfbc0b..79050681 100644
--- a/backend/usb.c
+++ b/backend/usb.c
@@ -110,6 +110,63 @@ print_device(const char *uri,		/* I - Device URI */
 }
 #endif /* HAVE_LIBUSB */
 
+#define HAVE_USB_MONITOR
+#define BEGIN_WAIT_TIME 2
+
+#ifdef HAVE_USB_MONITOR
+#include "usb_monitor.h"
+static char oldReasons[PRINTER_STATE_REASONS_SIZE] = {0};
+
+void UpdatePrinterState(PrinterStatus* jobData)
+{
+    if (jobData == NULL) {
+        fprintf(stderr, "DEBUG: USB_MONITOR UpdatePrinterState fail, jobData is NULL\n");
+        return;
+    }
+    char* addedReasons = NULL;
+    char* deletedReasons = NULL; 
+    ComparePrinterStateReasons(oldReasons, jobData->printerStateReasons, &addedReasons, &deletedReasons);
+    if (addedReasons != NULL) {
+        fprintf(stderr, "STATE: +%s\nSTATE: -none\n", addedReasons);
+    }
+    if (deletedReasons != NULL) {
+        fprintf(stderr, "STATE: -%s\nSTATE: -none\n", deletedReasons);
+    }
+    FreeCompareStringsResult(&addedReasons, &deletedReasons);
+    if (strcpy_s(oldReasons, PRINTER_STATE_REASONS_SIZE, jobData->printerStateReasons) != 0) {
+        fprintf(stderr, "DEBUG: USB_MONITOR UpdatePrinterState strcpy_s fail\n");
+    }
+    if (strcmp(jobData->printerStateReasons, "none") == 0) {
+        fprintf(stderr, "STATE: cups-waiting-for-job-completed\n");
+        return;
+    }
+}
+
+static void HandleTerm(int32_t sig)
+{
+    fprintf(stderr, "DEBUG: USB_MONITOR HandleTerm, set terminal singal\n");
+    SetTerminalSingal();
+}
+
+static void* MonitorPrinterThread(void* arg)
+{
+    if (arg == NULL) {
+        fprintf(stderr, "DEBUG: USB_MONITOR arg is nullptr\n");
+        return NULL;
+    }
+    sleep(BEGIN_WAIT_TIME);
+    char* uri = (char*)arg;
+    if (IsSupportIppOverUsb(uri)) {
+        if (StartMonitorIppPrinter(UpdatePrinterState, uri)) {
+            fprintf(stderr, "DEBUG: USB_MONITOR StartMonitorIppPrinter finished\n");
+        } else {
+            fprintf(stderr, "STATE: none\n");
+        }
+    }
+    free(uri);
+    return NULL;
+}
+#endif /* HAVE_USB_MONITOR */
 
 /*
  * 'main()' - Send a file to the specified USB port.
@@ -231,6 +288,13 @@ main(int  argc,				/* I - Number of command-line arguments (6 or 7) */
     copies = atoi(argv[4]);
   }
 
+#ifdef HAVE_USB_MONITOR
+signal(SIGTERM, HandleTerm);
+fprintf(stderr, "STATE: cups-waiting-for-job-completed\n");
+char* uriCopy = strdup(uri);
+pthread_t monitorThread = _cupsThreadCreate((_cups_thread_func_t)MonitorPrinterThread, uriCopy);
+#endif /* HAVE_USB_MONITOR */
+
  /*
   * Finally, send the print file...
   */
@@ -245,5 +309,15 @@ main(int  argc,				/* I - Number of command-line arguments (6 or 7) */
   if (print_fd != 0)
     close(print_fd);
 
+#ifdef HAVE_USB_MONITOR
+if (status != CUPS_BACKEND_OK) {
+    fprintf(stderr, "DEBUG: USB_MONITOR print_device fail, status = %d\n", (int)status);
+    SetTerminalSingal();
+    status = CUPS_BACKEND_FAILED;
+    fprintf(stderr, "STATE: stopped\n");
+}
+pthread_join(monitorThread, NULL);
+#endif /* HAVE_USB_MONITOR */
+
   return (status);
 }
